@page "/table"
@rendermode InteractiveServer
@using InsuranceCoverageBrowser.Data
@using InsuranceCoverageBrowser.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else if (!categories.Any())
{
    <h1>Insured Items</h1>
    <p>Total : $0.00</p>
}
else
{
    <h1>Insured Items</h1>
    <br />
    <p>Total : @categories.SelectMany(c => c.Items).Sum(item => item.Price).ToString("C")</p>
    <button class="btn btn-success mb-3" @onclick="ShowAddNewItemAsync">
        <i class="bi bi-plus"></i> Add Item
    </button>
    <table class="table table-bordered">
        @foreach (var category in categories)
        {
            <tr class="table-primary">
                <td colspan="3" class="table-primary pt-3 pb-3" style="font-weight: bold;">
                    @category.Name (Total Price: @category.Items?.Sum(item => item.Price).ToString("C"))
                </td>
            </tr>
            @foreach (var item in category.Items)
            {
                <tr>
                    <td class="align-middle w-100">@item.Name</td>
                    <td class="align-middle">@item.Price.ToString("C")</td>
                    <td class="align-middle">
                        <button class="btn btn-danger" @onclick="@(() => ShowDeleteConfirmationAsync(item))">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        }
    </table>
}

<ConfirmDialog @ref="deleteConfirmationDialog" />
<NewItemModal @ref="addNewItemModal" categories="categories" OnSubmitCallback="HandleNewItemSubmit" />

@code {
    private List<Category>? categories;
    private ConfirmDialog deleteConfirmationDialog = default!;
    private NewItemModal addNewItemModal = default!;
    [Inject] protected ToastService toastService { get; set; } = default!;

    private async Task Refresh()
    {
        categories = await DbContext.Categories
            .Include(c => c.Items)
            .ToListAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task ShowDeleteConfirmationAsync(Item item)
    {
        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await deleteConfirmationDialog.ShowAsync(
            title: "Are you sure you want to delete this item?",
            message1: $"Item Name : {item.Name}",
            message2: $"Item Price : {item.Price.ToString("C")}",
            confirmDialogOptions: options);

        if (confirmation)
        {
            DbContext.Items.Remove(item);
            await DbContext.SaveChangesAsync();
            await Refresh();
            toastService.Notify(new(ToastType.Success, $"Item : {item.Name} deleted successfully."));
        }
    }

    private async Task ShowAddNewItemAsync()
    {
        await addNewItemModal.ShowAsync();
    }

    private async Task HandleNewItemSubmit(Item newItem)
    {
        Console.WriteLine($"New Item Added: {newItem.Name}, Price: {newItem.Price}, Category: {newItem.Category.Name}");

        DbContext.Items.Add(newItem);
        await DbContext.SaveChangesAsync();
        await Refresh();
        toastService.Notify(new(ToastType.Success, $"Item : {newItem.Name} added successfully."));
    }
}
